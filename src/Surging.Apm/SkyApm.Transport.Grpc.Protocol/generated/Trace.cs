// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: language-agent-v2/trace.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol {

  /// <summary>Holder for reflection information generated from language-agent-v2/trace.proto</summary>
  public static partial class TraceReflection {

    #region Descriptor
    /// <summary>File descriptor for language-agent-v2/trace.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TraceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1sYW5ndWFnZS1hZ2VudC12Mi90cmFjZS5wcm90bxoTY29tbW9uL2NvbW1v",
            "bi5wcm90bxoZY29tbW9uL3RyYWNlLWNvbW1vbi5wcm90byKVAQoNU2VnbWVu",
            "dE9iamVjdBIhCg50cmFjZVNlZ21lbnRJZBgBIAEoCzIJLlVuaXF1ZUlkEhwK",
            "BXNwYW5zGAIgAygLMg0uU3Bhbk9iamVjdFYyEhEKCXNlcnZpY2VJZBgDIAEo",
            "BRIZChFzZXJ2aWNlSW5zdGFuY2VJZBgEIAEoBRIVCg1pc1NpemVMaW1pdGVk",
            "GAUgASgIIsECChBTZWdtZW50UmVmZXJlbmNlEhkKB3JlZlR5cGUYASABKA4y",
            "CC5SZWZUeXBlEicKFHBhcmVudFRyYWNlU2VnbWVudElkGAIgASgLMgkuVW5p",
            "cXVlSWQSFAoMcGFyZW50U3BhbklkGAMgASgFEh8KF3BhcmVudFNlcnZpY2VJ",
            "bnN0YW5jZUlkGAQgASgFEhYKDm5ldHdvcmtBZGRyZXNzGAUgASgJEhgKEG5l",
            "dHdvcmtBZGRyZXNzSWQYBiABKAUSHgoWZW50cnlTZXJ2aWNlSW5zdGFuY2VJ",
            "ZBgHIAEoBRIVCg1lbnRyeUVuZHBvaW50GAggASgJEhcKD2VudHJ5RW5kcG9p",
            "bnRJZBgJIAEoBRIWCg5wYXJlbnRFbmRwb2ludBgKIAEoCRIYChBwYXJlbnRF",
            "bmRwb2ludElkGAsgASgFIvMCCgxTcGFuT2JqZWN0VjISDgoGc3BhbklkGAEg",
            "ASgFEhQKDHBhcmVudFNwYW5JZBgCIAEoBRIRCglzdGFydFRpbWUYAyABKAMS",
            "DwoHZW5kVGltZRgEIAEoAxIfCgRyZWZzGAUgAygLMhEuU2VnbWVudFJlZmVy",
            "ZW5jZRIXCg9vcGVyYXRpb25OYW1lSWQYBiABKAUSFQoNb3BlcmF0aW9uTmFt",
            "ZRgHIAEoCRIOCgZwZWVySWQYCCABKAUSDAoEcGVlchgJIAEoCRIbCghzcGFu",
            "VHlwZRgKIAEoDjIJLlNwYW5UeXBlEh0KCXNwYW5MYXllchgLIAEoDjIKLlNw",
            "YW5MYXllchITCgtjb21wb25lbnRJZBgMIAEoBRIRCgljb21wb25lbnQYDSAB",
            "KAkSDwoHaXNFcnJvchgOIAEoCBIhCgR0YWdzGA8gAygLMhMuS2V5U3RyaW5n",
            "VmFsdWVQYWlyEhIKBGxvZ3MYECADKAsyBC5Mb2ciNgoDTG9nEgwKBHRpbWUY",
            "ASABKAMSIQoEZGF0YRgCIAMoCzITLktleVN0cmluZ1ZhbHVlUGFpcjJHChlU",
            "cmFjZVNlZ21lbnRSZXBvcnRTZXJ2aWNlEioKB2NvbGxlY3QSEC5VcHN0cmVh",
            "bVNlZ21lbnQaCS5Db21tYW5kcyIAKAFCVAozb3JnLmFwYWNoZS5za3l3YWxr",
            "aW5nLmFwbS5uZXR3b3JrLmxhbmd1YWdlLmFnZW50LnYyUAGqAhpTa3lXYWxr",
            "aW5nLk5ldHdvcmtQcm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.CommonReflection.Descriptor, global::SkyWalking.NetworkProtocol.TraceCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.SegmentObject), global::SkyWalking.NetworkProtocol.SegmentObject.Parser, new[]{ "TraceSegmentId", "Spans", "ServiceId", "ServiceInstanceId", "IsSizeLimited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.SegmentReference), global::SkyWalking.NetworkProtocol.SegmentReference.Parser, new[]{ "RefType", "ParentTraceSegmentId", "ParentSpanId", "ParentServiceInstanceId", "NetworkAddress", "NetworkAddressId", "EntryServiceInstanceId", "EntryEndpoint", "EntryEndpointId", "ParentEndpoint", "ParentEndpointId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.SpanObjectV2), global::SkyWalking.NetworkProtocol.SpanObjectV2.Parser, new[]{ "SpanId", "ParentSpanId", "StartTime", "EndTime", "Refs", "OperationNameId", "OperationName", "PeerId", "Peer", "SpanType", "SpanLayer", "ComponentId", "Component", "IsError", "Tags", "Logs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.Log), global::SkyWalking.NetworkProtocol.Log.Parser, new[]{ "Time", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SegmentObject : pb::IMessage<SegmentObject> {
    private static readonly pb::MessageParser<SegmentObject> _parser = new pb::MessageParser<SegmentObject>(() => new SegmentObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject(SegmentObject other) : this() {
      traceSegmentId_ = other.traceSegmentId_ != null ? other.traceSegmentId_.Clone() : null;
      spans_ = other.spans_.Clone();
      serviceId_ = other.serviceId_;
      serviceInstanceId_ = other.serviceInstanceId_;
      isSizeLimited_ = other.isSizeLimited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject Clone() {
      return new SegmentObject(this);
    }

    /// <summary>Field number for the "traceSegmentId" field.</summary>
    public const int TraceSegmentIdFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.UniqueId traceSegmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.UniqueId TraceSegmentId {
      get { return traceSegmentId_; }
      set {
        traceSegmentId_ = value;
      }
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.SpanObjectV2> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(18, global::SkyWalking.NetworkProtocol.SpanObjectV2.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SpanObjectV2> spans_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SpanObjectV2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SpanObjectV2> Spans {
      get { return spans_; }
    }

    /// <summary>Field number for the "serviceId" field.</summary>
    public const int ServiceIdFieldNumber = 3;
    private int serviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    /// <summary>Field number for the "serviceInstanceId" field.</summary>
    public const int ServiceInstanceIdFieldNumber = 4;
    private int serviceInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceInstanceId {
      get { return serviceInstanceId_; }
      set {
        serviceInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "isSizeLimited" field.</summary>
    public const int IsSizeLimitedFieldNumber = 5;
    private bool isSizeLimited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSizeLimited {
      get { return isSizeLimited_; }
      set {
        isSizeLimited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TraceSegmentId, other.TraceSegmentId)) return false;
      if(!spans_.Equals(other.spans_)) return false;
      if (ServiceId != other.ServiceId) return false;
      if (ServiceInstanceId != other.ServiceInstanceId) return false;
      if (IsSizeLimited != other.IsSizeLimited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (traceSegmentId_ != null) hash ^= TraceSegmentId.GetHashCode();
      hash ^= spans_.GetHashCode();
      if (ServiceId != 0) hash ^= ServiceId.GetHashCode();
      if (ServiceInstanceId != 0) hash ^= ServiceInstanceId.GetHashCode();
      if (IsSizeLimited != false) hash ^= IsSizeLimited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (traceSegmentId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TraceSegmentId);
      }
      spans_.WriteTo(output, _repeated_spans_codec);
      if (ServiceId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServiceId);
      }
      if (ServiceInstanceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServiceInstanceId);
      }
      if (IsSizeLimited != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSizeLimited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (traceSegmentId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TraceSegmentId);
      }
      size += spans_.CalculateSize(_repeated_spans_codec);
      if (ServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceId);
      }
      if (ServiceInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceInstanceId);
      }
      if (IsSizeLimited != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentObject other) {
      if (other == null) {
        return;
      }
      if (other.traceSegmentId_ != null) {
        if (traceSegmentId_ == null) {
          TraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
        }
        TraceSegmentId.MergeFrom(other.TraceSegmentId);
      }
      spans_.Add(other.spans_);
      if (other.ServiceId != 0) {
        ServiceId = other.ServiceId;
      }
      if (other.ServiceInstanceId != 0) {
        ServiceInstanceId = other.ServiceInstanceId;
      }
      if (other.IsSizeLimited != false) {
        IsSizeLimited = other.IsSizeLimited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (traceSegmentId_ == null) {
              TraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
            }
            input.ReadMessage(TraceSegmentId);
            break;
          }
          case 18: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
          case 24: {
            ServiceId = input.ReadInt32();
            break;
          }
          case 32: {
            ServiceInstanceId = input.ReadInt32();
            break;
          }
          case 40: {
            IsSizeLimited = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SegmentReference : pb::IMessage<SegmentReference> {
    private static readonly pb::MessageParser<SegmentReference> _parser = new pb::MessageParser<SegmentReference>(() => new SegmentReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference(SegmentReference other) : this() {
      refType_ = other.refType_;
      parentTraceSegmentId_ = other.parentTraceSegmentId_ != null ? other.parentTraceSegmentId_.Clone() : null;
      parentSpanId_ = other.parentSpanId_;
      parentServiceInstanceId_ = other.parentServiceInstanceId_;
      networkAddress_ = other.networkAddress_;
      networkAddressId_ = other.networkAddressId_;
      entryServiceInstanceId_ = other.entryServiceInstanceId_;
      entryEndpoint_ = other.entryEndpoint_;
      entryEndpointId_ = other.entryEndpointId_;
      parentEndpoint_ = other.parentEndpoint_;
      parentEndpointId_ = other.parentEndpointId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference Clone() {
      return new SegmentReference(this);
    }

    /// <summary>Field number for the "refType" field.</summary>
    public const int RefTypeFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.RefType refType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.RefType RefType {
      get { return refType_; }
      set {
        refType_ = value;
      }
    }

    /// <summary>Field number for the "parentTraceSegmentId" field.</summary>
    public const int ParentTraceSegmentIdFieldNumber = 2;
    private global::SkyWalking.NetworkProtocol.UniqueId parentTraceSegmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.UniqueId ParentTraceSegmentId {
      get { return parentTraceSegmentId_; }
      set {
        parentTraceSegmentId_ = value;
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 3;
    private int parentSpanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "parentServiceInstanceId" field.</summary>
    public const int ParentServiceInstanceIdFieldNumber = 4;
    private int parentServiceInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentServiceInstanceId {
      get { return parentServiceInstanceId_; }
      set {
        parentServiceInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "networkAddress" field.</summary>
    public const int NetworkAddressFieldNumber = 5;
    private string networkAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkAddress {
      get { return networkAddress_; }
      set {
        networkAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "networkAddressId" field.</summary>
    public const int NetworkAddressIdFieldNumber = 6;
    private int networkAddressId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetworkAddressId {
      get { return networkAddressId_; }
      set {
        networkAddressId_ = value;
      }
    }

    /// <summary>Field number for the "entryServiceInstanceId" field.</summary>
    public const int EntryServiceInstanceIdFieldNumber = 7;
    private int entryServiceInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntryServiceInstanceId {
      get { return entryServiceInstanceId_; }
      set {
        entryServiceInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "entryEndpoint" field.</summary>
    public const int EntryEndpointFieldNumber = 8;
    private string entryEndpoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntryEndpoint {
      get { return entryEndpoint_; }
      set {
        entryEndpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entryEndpointId" field.</summary>
    public const int EntryEndpointIdFieldNumber = 9;
    private int entryEndpointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntryEndpointId {
      get { return entryEndpointId_; }
      set {
        entryEndpointId_ = value;
      }
    }

    /// <summary>Field number for the "parentEndpoint" field.</summary>
    public const int ParentEndpointFieldNumber = 10;
    private string parentEndpoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentEndpoint {
      get { return parentEndpoint_; }
      set {
        parentEndpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentEndpointId" field.</summary>
    public const int ParentEndpointIdFieldNumber = 11;
    private int parentEndpointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentEndpointId {
      get { return parentEndpointId_; }
      set {
        parentEndpointId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefType != other.RefType) return false;
      if (!object.Equals(ParentTraceSegmentId, other.ParentTraceSegmentId)) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (ParentServiceInstanceId != other.ParentServiceInstanceId) return false;
      if (NetworkAddress != other.NetworkAddress) return false;
      if (NetworkAddressId != other.NetworkAddressId) return false;
      if (EntryServiceInstanceId != other.EntryServiceInstanceId) return false;
      if (EntryEndpoint != other.EntryEndpoint) return false;
      if (EntryEndpointId != other.EntryEndpointId) return false;
      if (ParentEndpoint != other.ParentEndpoint) return false;
      if (ParentEndpointId != other.ParentEndpointId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefType != 0) hash ^= RefType.GetHashCode();
      if (parentTraceSegmentId_ != null) hash ^= ParentTraceSegmentId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (ParentServiceInstanceId != 0) hash ^= ParentServiceInstanceId.GetHashCode();
      if (NetworkAddress.Length != 0) hash ^= NetworkAddress.GetHashCode();
      if (NetworkAddressId != 0) hash ^= NetworkAddressId.GetHashCode();
      if (EntryServiceInstanceId != 0) hash ^= EntryServiceInstanceId.GetHashCode();
      if (EntryEndpoint.Length != 0) hash ^= EntryEndpoint.GetHashCode();
      if (EntryEndpointId != 0) hash ^= EntryEndpointId.GetHashCode();
      if (ParentEndpoint.Length != 0) hash ^= ParentEndpoint.GetHashCode();
      if (ParentEndpointId != 0) hash ^= ParentEndpointId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RefType);
      }
      if (parentTraceSegmentId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ParentSpanId);
      }
      if (ParentServiceInstanceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentServiceInstanceId);
      }
      if (NetworkAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NetworkAddress);
      }
      if (NetworkAddressId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NetworkAddressId);
      }
      if (EntryServiceInstanceId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EntryServiceInstanceId);
      }
      if (EntryEndpoint.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EntryEndpoint);
      }
      if (EntryEndpointId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EntryEndpointId);
      }
      if (ParentEndpoint.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ParentEndpoint);
      }
      if (ParentEndpointId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ParentEndpointId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefType);
      }
      if (parentTraceSegmentId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (ParentServiceInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentServiceInstanceId);
      }
      if (NetworkAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkAddress);
      }
      if (NetworkAddressId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkAddressId);
      }
      if (EntryServiceInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntryServiceInstanceId);
      }
      if (EntryEndpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntryEndpoint);
      }
      if (EntryEndpointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntryEndpointId);
      }
      if (ParentEndpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentEndpoint);
      }
      if (ParentEndpointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentEndpointId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentReference other) {
      if (other == null) {
        return;
      }
      if (other.RefType != 0) {
        RefType = other.RefType;
      }
      if (other.parentTraceSegmentId_ != null) {
        if (parentTraceSegmentId_ == null) {
          ParentTraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
        }
        ParentTraceSegmentId.MergeFrom(other.ParentTraceSegmentId);
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.ParentServiceInstanceId != 0) {
        ParentServiceInstanceId = other.ParentServiceInstanceId;
      }
      if (other.NetworkAddress.Length != 0) {
        NetworkAddress = other.NetworkAddress;
      }
      if (other.NetworkAddressId != 0) {
        NetworkAddressId = other.NetworkAddressId;
      }
      if (other.EntryServiceInstanceId != 0) {
        EntryServiceInstanceId = other.EntryServiceInstanceId;
      }
      if (other.EntryEndpoint.Length != 0) {
        EntryEndpoint = other.EntryEndpoint;
      }
      if (other.EntryEndpointId != 0) {
        EntryEndpointId = other.EntryEndpointId;
      }
      if (other.ParentEndpoint.Length != 0) {
        ParentEndpoint = other.ParentEndpoint;
      }
      if (other.ParentEndpointId != 0) {
        ParentEndpointId = other.ParentEndpointId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefType = (global::SkyWalking.NetworkProtocol.RefType) input.ReadEnum();
            break;
          }
          case 18: {
            if (parentTraceSegmentId_ == null) {
              ParentTraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
            }
            input.ReadMessage(ParentTraceSegmentId);
            break;
          }
          case 24: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 32: {
            ParentServiceInstanceId = input.ReadInt32();
            break;
          }
          case 42: {
            NetworkAddress = input.ReadString();
            break;
          }
          case 48: {
            NetworkAddressId = input.ReadInt32();
            break;
          }
          case 56: {
            EntryServiceInstanceId = input.ReadInt32();
            break;
          }
          case 66: {
            EntryEndpoint = input.ReadString();
            break;
          }
          case 72: {
            EntryEndpointId = input.ReadInt32();
            break;
          }
          case 82: {
            ParentEndpoint = input.ReadString();
            break;
          }
          case 88: {
            ParentEndpointId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpanObjectV2 : pb::IMessage<SpanObjectV2> {
    private static readonly pb::MessageParser<SpanObjectV2> _parser = new pb::MessageParser<SpanObjectV2>(() => new SpanObjectV2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanObjectV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObjectV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObjectV2(SpanObjectV2 other) : this() {
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      refs_ = other.refs_.Clone();
      operationNameId_ = other.operationNameId_;
      operationName_ = other.operationName_;
      peerId_ = other.peerId_;
      peer_ = other.peer_;
      spanType_ = other.spanType_;
      spanLayer_ = other.spanLayer_;
      componentId_ = other.componentId_;
      component_ = other.component_;
      isError_ = other.isError_;
      tags_ = other.tags_.Clone();
      logs_ = other.logs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObjectV2 Clone() {
      return new SpanObjectV2(this);
    }

    /// <summary>Field number for the "spanId" field.</summary>
    public const int SpanIdFieldNumber = 1;
    private int spanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpanId {
      get { return spanId_; }
      set {
        spanId_ = value;
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 2;
    private int parentSpanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "refs" field.</summary>
    public const int RefsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.SegmentReference> _repeated_refs_codec
        = pb::FieldCodec.ForMessage(42, global::SkyWalking.NetworkProtocol.SegmentReference.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SegmentReference> refs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SegmentReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SegmentReference> Refs {
      get { return refs_; }
    }

    /// <summary>Field number for the "operationNameId" field.</summary>
    public const int OperationNameIdFieldNumber = 6;
    private int operationNameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationNameId {
      get { return operationNameId_; }
      set {
        operationNameId_ = value;
      }
    }

    /// <summary>Field number for the "operationName" field.</summary>
    public const int OperationNameFieldNumber = 7;
    private string operationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peerId" field.</summary>
    public const int PeerIdFieldNumber = 8;
    private int peerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PeerId {
      get { return peerId_; }
      set {
        peerId_ = value;
      }
    }

    /// <summary>Field number for the "peer" field.</summary>
    public const int PeerFieldNumber = 9;
    private string peer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Peer {
      get { return peer_; }
      set {
        peer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spanType" field.</summary>
    public const int SpanTypeFieldNumber = 10;
    private global::SkyWalking.NetworkProtocol.SpanType spanType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.SpanType SpanType {
      get { return spanType_; }
      set {
        spanType_ = value;
      }
    }

    /// <summary>Field number for the "spanLayer" field.</summary>
    public const int SpanLayerFieldNumber = 11;
    private global::SkyWalking.NetworkProtocol.SpanLayer spanLayer_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.SpanLayer SpanLayer {
      get { return spanLayer_; }
      set {
        spanLayer_ = value;
      }
    }

    /// <summary>Field number for the "componentId" field.</summary>
    public const int ComponentIdFieldNumber = 12;
    private int componentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentId {
      get { return componentId_; }
      set {
        componentId_ = value;
      }
    }

    /// <summary>Field number for the "component" field.</summary>
    public const int ComponentFieldNumber = 13;
    private string component_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Component {
      get { return component_; }
      set {
        component_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isError" field.</summary>
    public const int IsErrorFieldNumber = 14;
    private bool isError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.KeyStringValuePair> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(122, global::SkyWalking.NetworkProtocol.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyStringValuePair> tags_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyStringValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyStringValuePair> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.Log> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(130, global::SkyWalking.NetworkProtocol.Log.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.Log> logs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.Log>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.Log> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanObjectV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanObjectV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!refs_.Equals(other.refs_)) return false;
      if (OperationNameId != other.OperationNameId) return false;
      if (OperationName != other.OperationName) return false;
      if (PeerId != other.PeerId) return false;
      if (Peer != other.Peer) return false;
      if (SpanType != other.SpanType) return false;
      if (SpanLayer != other.SpanLayer) return false;
      if (ComponentId != other.ComponentId) return false;
      if (Component != other.Component) return false;
      if (IsError != other.IsError) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpanId != 0) hash ^= SpanId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      hash ^= refs_.GetHashCode();
      if (OperationNameId != 0) hash ^= OperationNameId.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      if (PeerId != 0) hash ^= PeerId.GetHashCode();
      if (Peer.Length != 0) hash ^= Peer.GetHashCode();
      if (SpanType != 0) hash ^= SpanType.GetHashCode();
      if (SpanLayer != 0) hash ^= SpanLayer.GetHashCode();
      if (ComponentId != 0) hash ^= ComponentId.GetHashCode();
      if (Component.Length != 0) hash ^= Component.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpanId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentSpanId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      refs_.WriteTo(output, _repeated_refs_codec);
      if (OperationNameId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OperationNameId);
      }
      if (OperationName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OperationName);
      }
      if (PeerId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PeerId);
      }
      if (Peer.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Peer);
      }
      if (SpanType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SpanType);
      }
      if (SpanLayer != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SpanLayer);
      }
      if (ComponentId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ComponentId);
      }
      if (Component.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Component);
      }
      if (IsError != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsError);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpanId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += refs_.CalculateSize(_repeated_refs_codec);
      if (OperationNameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationNameId);
      }
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      if (PeerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerId);
      }
      if (Peer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Peer);
      }
      if (SpanType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanType);
      }
      if (SpanLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanLayer);
      }
      if (ComponentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentId);
      }
      if (Component.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Component);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanObjectV2 other) {
      if (other == null) {
        return;
      }
      if (other.SpanId != 0) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      refs_.Add(other.refs_);
      if (other.OperationNameId != 0) {
        OperationNameId = other.OperationNameId;
      }
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      if (other.PeerId != 0) {
        PeerId = other.PeerId;
      }
      if (other.Peer.Length != 0) {
        Peer = other.Peer;
      }
      if (other.SpanType != 0) {
        SpanType = other.SpanType;
      }
      if (other.SpanLayer != 0) {
        SpanLayer = other.SpanLayer;
      }
      if (other.ComponentId != 0) {
        ComponentId = other.ComponentId;
      }
      if (other.Component.Length != 0) {
        Component = other.Component;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      tags_.Add(other.tags_);
      logs_.Add(other.logs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpanId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 42: {
            refs_.AddEntriesFrom(input, _repeated_refs_codec);
            break;
          }
          case 48: {
            OperationNameId = input.ReadInt32();
            break;
          }
          case 58: {
            OperationName = input.ReadString();
            break;
          }
          case 64: {
            PeerId = input.ReadInt32();
            break;
          }
          case 74: {
            Peer = input.ReadString();
            break;
          }
          case 80: {
            SpanType = (global::SkyWalking.NetworkProtocol.SpanType) input.ReadEnum();
            break;
          }
          case 88: {
            SpanLayer = (global::SkyWalking.NetworkProtocol.SpanLayer) input.ReadEnum();
            break;
          }
          case 96: {
            ComponentId = input.ReadInt32();
            break;
          }
          case 106: {
            Component = input.ReadString();
            break;
          }
          case 112: {
            IsError = input.ReadBool();
            break;
          }
          case 122: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 130: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      time_ = other.time_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.KeyStringValuePair> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::SkyWalking.NetworkProtocol.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyStringValuePair> data_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyStringValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyStringValuePair> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
