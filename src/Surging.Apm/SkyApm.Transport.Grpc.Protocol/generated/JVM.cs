// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common/JVM.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol {

  /// <summary>Holder for reflection information generated from common/JVM.proto</summary>
  public static partial class JVMReflection {

    #region Descriptor
    /// <summary>File descriptor for common/JVM.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JVMReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBjb21tb24vSlZNLnByb3RvGhNjb21tb24vY29tbW9uLnByb3RvIncKCUpW",
            "TU1ldHJpYxIMCgR0aW1lGAEgASgDEhEKA2NwdRgCIAEoCzIELkNQVRIXCgZt",
            "ZW1vcnkYAyADKAsyBy5NZW1vcnkSHwoKbWVtb3J5UG9vbBgEIAMoCzILLk1l",
            "bW9yeVBvb2wSDwoCZ2MYBSADKAsyAy5HQyJUCgZNZW1vcnkSDgoGaXNIZWFw",
            "GAEgASgIEgwKBGluaXQYAiABKAMSCwoDbWF4GAMgASgDEgwKBHVzZWQYBCAB",
            "KAMSEQoJY29tbWl0dGVkGAUgASgDImAKCk1lbW9yeVBvb2wSFwoEdHlwZRgB",
            "IAEoDjIJLlBvb2xUeXBlEgwKBGluaXQYAiABKAMSCwoDbWF4GAMgASgDEgwK",
            "BHVzZWQYBCABKAMSEAoIY29tbWl0ZWQYBSABKAMiPAoCR0MSGQoGcGhyYXNl",
            "GAEgASgOMgkuR0NQaHJhc2USDQoFY291bnQYAiABKAMSDAoEdGltZRgDIAEo",
            "AyqAAQoIUG9vbFR5cGUSFAoQQ09ERV9DQUNIRV9VU0FHRRAAEhAKDE5FV0dF",
            "Tl9VU0FHRRABEhAKDE9MREdFTl9VU0FHRRACEhIKDlNVUlZJVk9SX1VTQUdF",
            "EAMSEQoNUEVSTUdFTl9VU0FHRRAEEhMKD01FVEFTUEFDRV9VU0FHRRAFKhwK",
            "CEdDUGhyYXNlEgcKA05FVxAAEgcKA09MRBABQlEKMG9yZy5hcGFjaGUuc2t5",
            "d2Fsa2luZy5hcG0ubmV0d29yay5sYW5ndWFnZS5hZ2VudFABqgIaU2t5V2Fs",
            "a2luZy5OZXR3b3JrUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SkyWalking.NetworkProtocol.PoolType), typeof(global::SkyWalking.NetworkProtocol.GCPhrase), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.JVMMetric), global::SkyWalking.NetworkProtocol.JVMMetric.Parser, new[]{ "Time", "Cpu", "Memory", "MemoryPool", "Gc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.Memory), global::SkyWalking.NetworkProtocol.Memory.Parser, new[]{ "IsHeap", "Init", "Max", "Used", "Committed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.MemoryPool), global::SkyWalking.NetworkProtocol.MemoryPool.Parser, new[]{ "Type", "Init", "Max", "Used", "Commited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.GC), global::SkyWalking.NetworkProtocol.GC.Parser, new[]{ "Phrase", "Count", "Time" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PoolType {
    [pbr::OriginalName("CODE_CACHE_USAGE")] CodeCacheUsage = 0,
    [pbr::OriginalName("NEWGEN_USAGE")] NewgenUsage = 1,
    [pbr::OriginalName("OLDGEN_USAGE")] OldgenUsage = 2,
    [pbr::OriginalName("SURVIVOR_USAGE")] SurvivorUsage = 3,
    [pbr::OriginalName("PERMGEN_USAGE")] PermgenUsage = 4,
    [pbr::OriginalName("METASPACE_USAGE")] MetaspaceUsage = 5,
  }

  public enum GCPhrase {
    [pbr::OriginalName("NEW")] New = 0,
    [pbr::OriginalName("OLD")] Old = 1,
  }

  #endregion

  #region Messages
  public sealed partial class JVMMetric : pb::IMessage<JVMMetric> {
    private static readonly pb::MessageParser<JVMMetric> _parser = new pb::MessageParser<JVMMetric>(() => new JVMMetric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JVMMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.JVMReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetric(JVMMetric other) : this() {
      time_ = other.time_;
      cpu_ = other.cpu_ != null ? other.cpu_.Clone() : null;
      memory_ = other.memory_.Clone();
      memoryPool_ = other.memoryPool_.Clone();
      gc_ = other.gc_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetric Clone() {
      return new JVMMetric(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 2;
    private global::SkyWalking.NetworkProtocol.CPU cpu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.CPU Cpu {
      get { return cpu_; }
      set {
        cpu_ = value;
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.Memory> _repeated_memory_codec
        = pb::FieldCodec.ForMessage(26, global::SkyWalking.NetworkProtocol.Memory.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.Memory> memory_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.Memory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.Memory> Memory {
      get { return memory_; }
    }

    /// <summary>Field number for the "memoryPool" field.</summary>
    public const int MemoryPoolFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.MemoryPool> _repeated_memoryPool_codec
        = pb::FieldCodec.ForMessage(34, global::SkyWalking.NetworkProtocol.MemoryPool.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.MemoryPool> memoryPool_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.MemoryPool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.MemoryPool> MemoryPool {
      get { return memoryPool_; }
    }

    /// <summary>Field number for the "gc" field.</summary>
    public const int GcFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.GC> _repeated_gc_codec
        = pb::FieldCodec.ForMessage(42, global::SkyWalking.NetworkProtocol.GC.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.GC> gc_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.GC>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.GC> Gc {
      get { return gc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JVMMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JVMMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (!object.Equals(Cpu, other.Cpu)) return false;
      if(!memory_.Equals(other.memory_)) return false;
      if(!memoryPool_.Equals(other.memoryPool_)) return false;
      if(!gc_.Equals(other.gc_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (cpu_ != null) hash ^= Cpu.GetHashCode();
      hash ^= memory_.GetHashCode();
      hash ^= memoryPool_.GetHashCode();
      hash ^= gc_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (cpu_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cpu);
      }
      memory_.WriteTo(output, _repeated_memory_codec);
      memoryPool_.WriteTo(output, _repeated_memoryPool_codec);
      gc_.WriteTo(output, _repeated_gc_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (cpu_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cpu);
      }
      size += memory_.CalculateSize(_repeated_memory_codec);
      size += memoryPool_.CalculateSize(_repeated_memoryPool_codec);
      size += gc_.CalculateSize(_repeated_gc_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JVMMetric other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.cpu_ != null) {
        if (cpu_ == null) {
          Cpu = new global::SkyWalking.NetworkProtocol.CPU();
        }
        Cpu.MergeFrom(other.Cpu);
      }
      memory_.Add(other.memory_);
      memoryPool_.Add(other.memoryPool_);
      gc_.Add(other.gc_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            if (cpu_ == null) {
              Cpu = new global::SkyWalking.NetworkProtocol.CPU();
            }
            input.ReadMessage(Cpu);
            break;
          }
          case 26: {
            memory_.AddEntriesFrom(input, _repeated_memory_codec);
            break;
          }
          case 34: {
            memoryPool_.AddEntriesFrom(input, _repeated_memoryPool_codec);
            break;
          }
          case 42: {
            gc_.AddEntriesFrom(input, _repeated_gc_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Memory : pb::IMessage<Memory> {
    private static readonly pb::MessageParser<Memory> _parser = new pb::MessageParser<Memory>(() => new Memory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Memory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.JVMReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory(Memory other) : this() {
      isHeap_ = other.isHeap_;
      init_ = other.init_;
      max_ = other.max_;
      used_ = other.used_;
      committed_ = other.committed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory Clone() {
      return new Memory(this);
    }

    /// <summary>Field number for the "isHeap" field.</summary>
    public const int IsHeapFieldNumber = 1;
    private bool isHeap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeap {
      get { return isHeap_; }
      set {
        isHeap_ = value;
      }
    }

    /// <summary>Field number for the "init" field.</summary>
    public const int InitFieldNumber = 2;
    private long init_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Init {
      get { return init_; }
      set {
        init_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private long max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 4;
    private long used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    /// <summary>Field number for the "committed" field.</summary>
    public const int CommittedFieldNumber = 5;
    private long committed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Committed {
      get { return committed_; }
      set {
        committed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Memory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Memory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHeap != other.IsHeap) return false;
      if (Init != other.Init) return false;
      if (Max != other.Max) return false;
      if (Used != other.Used) return false;
      if (Committed != other.Committed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsHeap != false) hash ^= IsHeap.GetHashCode();
      if (Init != 0L) hash ^= Init.GetHashCode();
      if (Max != 0L) hash ^= Max.GetHashCode();
      if (Used != 0L) hash ^= Used.GetHashCode();
      if (Committed != 0L) hash ^= Committed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHeap != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHeap);
      }
      if (Init != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Init);
      }
      if (Max != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Max);
      }
      if (Used != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Used);
      }
      if (Committed != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Committed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsHeap != false) {
        size += 1 + 1;
      }
      if (Init != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Init);
      }
      if (Max != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
      }
      if (Used != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Used);
      }
      if (Committed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Committed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Memory other) {
      if (other == null) {
        return;
      }
      if (other.IsHeap != false) {
        IsHeap = other.IsHeap;
      }
      if (other.Init != 0L) {
        Init = other.Init;
      }
      if (other.Max != 0L) {
        Max = other.Max;
      }
      if (other.Used != 0L) {
        Used = other.Used;
      }
      if (other.Committed != 0L) {
        Committed = other.Committed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsHeap = input.ReadBool();
            break;
          }
          case 16: {
            Init = input.ReadInt64();
            break;
          }
          case 24: {
            Max = input.ReadInt64();
            break;
          }
          case 32: {
            Used = input.ReadInt64();
            break;
          }
          case 40: {
            Committed = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemoryPool : pb::IMessage<MemoryPool> {
    private static readonly pb::MessageParser<MemoryPool> _parser = new pb::MessageParser<MemoryPool>(() => new MemoryPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemoryPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.JVMReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryPool(MemoryPool other) : this() {
      type_ = other.type_;
      init_ = other.init_;
      max_ = other.max_;
      used_ = other.used_;
      commited_ = other.commited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryPool Clone() {
      return new MemoryPool(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.PoolType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.PoolType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "init" field.</summary>
    public const int InitFieldNumber = 2;
    private long init_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Init {
      get { return init_; }
      set {
        init_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private long max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 4;
    private long used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    /// <summary>Field number for the "commited" field.</summary>
    public const int CommitedFieldNumber = 5;
    private long commited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Commited {
      get { return commited_; }
      set {
        commited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemoryPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemoryPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Init != other.Init) return false;
      if (Max != other.Max) return false;
      if (Used != other.Used) return false;
      if (Commited != other.Commited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Init != 0L) hash ^= Init.GetHashCode();
      if (Max != 0L) hash ^= Max.GetHashCode();
      if (Used != 0L) hash ^= Used.GetHashCode();
      if (Commited != 0L) hash ^= Commited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Init != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Init);
      }
      if (Max != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Max);
      }
      if (Used != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Used);
      }
      if (Commited != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Commited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Init != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Init);
      }
      if (Max != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
      }
      if (Used != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Used);
      }
      if (Commited != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commited);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemoryPool other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Init != 0L) {
        Init = other.Init;
      }
      if (other.Max != 0L) {
        Max = other.Max;
      }
      if (other.Used != 0L) {
        Used = other.Used;
      }
      if (other.Commited != 0L) {
        Commited = other.Commited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::SkyWalking.NetworkProtocol.PoolType) input.ReadEnum();
            break;
          }
          case 16: {
            Init = input.ReadInt64();
            break;
          }
          case 24: {
            Max = input.ReadInt64();
            break;
          }
          case 32: {
            Used = input.ReadInt64();
            break;
          }
          case 40: {
            Commited = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GC : pb::IMessage<GC> {
    private static readonly pb::MessageParser<GC> _parser = new pb::MessageParser<GC>(() => new GC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.JVMReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GC(GC other) : this() {
      phrase_ = other.phrase_;
      count_ = other.count_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GC Clone() {
      return new GC(this);
    }

    /// <summary>Field number for the "phrase" field.</summary>
    public const int PhraseFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.GCPhrase phrase_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.GCPhrase Phrase {
      get { return phrase_; }
      set {
        phrase_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phrase != other.Phrase) return false;
      if (Count != other.Count) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phrase != 0) hash ^= Phrase.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phrase != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phrase);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phrase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phrase);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GC other) {
      if (other == null) {
        return;
      }
      if (other.Phrase != 0) {
        Phrase = other.Phrase;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Phrase = (global::SkyWalking.NetworkProtocol.GCPhrase) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
