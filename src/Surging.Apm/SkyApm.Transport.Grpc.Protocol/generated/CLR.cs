// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common/CLR.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol {

  /// <summary>Holder for reflection information generated from common/CLR.proto</summary>
  public static partial class CLRReflection {

    #region Descriptor
    /// <summary>File descriptor for common/CLR.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CLRReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBjb21tb24vQ0xSLnByb3RvGhNjb21tb24vY29tbW9uLnByb3RvIlwKCUNM",
            "Uk1ldHJpYxIMCgR0aW1lGAEgASgDEhEKA2NwdRgCIAEoCzIELkNQVRISCgJn",
            "YxgDIAEoCzIGLkNsckdDEhoKBnRocmVhZBgEIAEoCzIKLkNsclRocmVhZCJp",
            "CgVDbHJHQxIYChBHZW4wQ29sbGVjdENvdW50GAEgASgDEhgKEEdlbjFDb2xs",
            "ZWN0Q291bnQYAiABKAMSGAoQR2VuMkNvbGxlY3RDb3VudBgDIAEoAxISCgpI",
            "ZWFwTWVtb3J5GAQgASgDIo8BCglDbHJUaHJlYWQSJgoeQXZhaWxhYmxlQ29t",
            "cGxldGlvblBvcnRUaHJlYWRzGAEgASgFEh4KFkF2YWlsYWJsZVdvcmtlclRo",
            "cmVhZHMYAiABKAUSIAoYTWF4Q29tcGxldGlvblBvcnRUaHJlYWRzGAMgASgF",
            "EhgKEE1heFdvcmtlclRocmVhZHMYBCABKAVCUQowb3JnLmFwYWNoZS5za3l3",
            "YWxraW5nLmFwbS5uZXR3b3JrLmxhbmd1YWdlLmFnZW50UAGqAhpTa3lXYWxr",
            "aW5nLk5ldHdvcmtQcm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.CLRMetric), global::SkyWalking.NetworkProtocol.CLRMetric.Parser, new[]{ "Time", "Cpu", "Gc", "Thread" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.ClrGC), global::SkyWalking.NetworkProtocol.ClrGC.Parser, new[]{ "Gen0CollectCount", "Gen1CollectCount", "Gen2CollectCount", "HeapMemory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.ClrThread), global::SkyWalking.NetworkProtocol.ClrThread.Parser, new[]{ "AvailableCompletionPortThreads", "AvailableWorkerThreads", "MaxCompletionPortThreads", "MaxWorkerThreads" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CLRMetric : pb::IMessage<CLRMetric> {
    private static readonly pb::MessageParser<CLRMetric> _parser = new pb::MessageParser<CLRMetric>(() => new CLRMetric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CLRMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.CLRReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLRMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLRMetric(CLRMetric other) : this() {
      time_ = other.time_;
      cpu_ = other.cpu_ != null ? other.cpu_.Clone() : null;
      gc_ = other.gc_ != null ? other.gc_.Clone() : null;
      thread_ = other.thread_ != null ? other.thread_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CLRMetric Clone() {
      return new CLRMetric(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 2;
    private global::SkyWalking.NetworkProtocol.CPU cpu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.CPU Cpu {
      get { return cpu_; }
      set {
        cpu_ = value;
      }
    }

    /// <summary>Field number for the "gc" field.</summary>
    public const int GcFieldNumber = 3;
    private global::SkyWalking.NetworkProtocol.ClrGC gc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.ClrGC Gc {
      get { return gc_; }
      set {
        gc_ = value;
      }
    }

    /// <summary>Field number for the "thread" field.</summary>
    public const int ThreadFieldNumber = 4;
    private global::SkyWalking.NetworkProtocol.ClrThread thread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.ClrThread Thread {
      get { return thread_; }
      set {
        thread_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CLRMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CLRMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (!object.Equals(Cpu, other.Cpu)) return false;
      if (!object.Equals(Gc, other.Gc)) return false;
      if (!object.Equals(Thread, other.Thread)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (cpu_ != null) hash ^= Cpu.GetHashCode();
      if (gc_ != null) hash ^= Gc.GetHashCode();
      if (thread_ != null) hash ^= Thread.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (cpu_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cpu);
      }
      if (gc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Gc);
      }
      if (thread_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Thread);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (cpu_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cpu);
      }
      if (gc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gc);
      }
      if (thread_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thread);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CLRMetric other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.cpu_ != null) {
        if (cpu_ == null) {
          Cpu = new global::SkyWalking.NetworkProtocol.CPU();
        }
        Cpu.MergeFrom(other.Cpu);
      }
      if (other.gc_ != null) {
        if (gc_ == null) {
          Gc = new global::SkyWalking.NetworkProtocol.ClrGC();
        }
        Gc.MergeFrom(other.Gc);
      }
      if (other.thread_ != null) {
        if (thread_ == null) {
          Thread = new global::SkyWalking.NetworkProtocol.ClrThread();
        }
        Thread.MergeFrom(other.Thread);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            if (cpu_ == null) {
              Cpu = new global::SkyWalking.NetworkProtocol.CPU();
            }
            input.ReadMessage(Cpu);
            break;
          }
          case 26: {
            if (gc_ == null) {
              Gc = new global::SkyWalking.NetworkProtocol.ClrGC();
            }
            input.ReadMessage(Gc);
            break;
          }
          case 34: {
            if (thread_ == null) {
              Thread = new global::SkyWalking.NetworkProtocol.ClrThread();
            }
            input.ReadMessage(Thread);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClrGC : pb::IMessage<ClrGC> {
    private static readonly pb::MessageParser<ClrGC> _parser = new pb::MessageParser<ClrGC>(() => new ClrGC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClrGC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.CLRReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClrGC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClrGC(ClrGC other) : this() {
      gen0CollectCount_ = other.gen0CollectCount_;
      gen1CollectCount_ = other.gen1CollectCount_;
      gen2CollectCount_ = other.gen2CollectCount_;
      heapMemory_ = other.heapMemory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClrGC Clone() {
      return new ClrGC(this);
    }

    /// <summary>Field number for the "Gen0CollectCount" field.</summary>
    public const int Gen0CollectCountFieldNumber = 1;
    private long gen0CollectCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gen0CollectCount {
      get { return gen0CollectCount_; }
      set {
        gen0CollectCount_ = value;
      }
    }

    /// <summary>Field number for the "Gen1CollectCount" field.</summary>
    public const int Gen1CollectCountFieldNumber = 2;
    private long gen1CollectCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gen1CollectCount {
      get { return gen1CollectCount_; }
      set {
        gen1CollectCount_ = value;
      }
    }

    /// <summary>Field number for the "Gen2CollectCount" field.</summary>
    public const int Gen2CollectCountFieldNumber = 3;
    private long gen2CollectCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gen2CollectCount {
      get { return gen2CollectCount_; }
      set {
        gen2CollectCount_ = value;
      }
    }

    /// <summary>Field number for the "HeapMemory" field.</summary>
    public const int HeapMemoryFieldNumber = 4;
    private long heapMemory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeapMemory {
      get { return heapMemory_; }
      set {
        heapMemory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClrGC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClrGC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gen0CollectCount != other.Gen0CollectCount) return false;
      if (Gen1CollectCount != other.Gen1CollectCount) return false;
      if (Gen2CollectCount != other.Gen2CollectCount) return false;
      if (HeapMemory != other.HeapMemory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gen0CollectCount != 0L) hash ^= Gen0CollectCount.GetHashCode();
      if (Gen1CollectCount != 0L) hash ^= Gen1CollectCount.GetHashCode();
      if (Gen2CollectCount != 0L) hash ^= Gen2CollectCount.GetHashCode();
      if (HeapMemory != 0L) hash ^= HeapMemory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gen0CollectCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Gen0CollectCount);
      }
      if (Gen1CollectCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gen1CollectCount);
      }
      if (Gen2CollectCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Gen2CollectCount);
      }
      if (HeapMemory != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(HeapMemory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gen0CollectCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gen0CollectCount);
      }
      if (Gen1CollectCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gen1CollectCount);
      }
      if (Gen2CollectCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gen2CollectCount);
      }
      if (HeapMemory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeapMemory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClrGC other) {
      if (other == null) {
        return;
      }
      if (other.Gen0CollectCount != 0L) {
        Gen0CollectCount = other.Gen0CollectCount;
      }
      if (other.Gen1CollectCount != 0L) {
        Gen1CollectCount = other.Gen1CollectCount;
      }
      if (other.Gen2CollectCount != 0L) {
        Gen2CollectCount = other.Gen2CollectCount;
      }
      if (other.HeapMemory != 0L) {
        HeapMemory = other.HeapMemory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gen0CollectCount = input.ReadInt64();
            break;
          }
          case 16: {
            Gen1CollectCount = input.ReadInt64();
            break;
          }
          case 24: {
            Gen2CollectCount = input.ReadInt64();
            break;
          }
          case 32: {
            HeapMemory = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClrThread : pb::IMessage<ClrThread> {
    private static readonly pb::MessageParser<ClrThread> _parser = new pb::MessageParser<ClrThread>(() => new ClrThread());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClrThread> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.CLRReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClrThread() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClrThread(ClrThread other) : this() {
      availableCompletionPortThreads_ = other.availableCompletionPortThreads_;
      availableWorkerThreads_ = other.availableWorkerThreads_;
      maxCompletionPortThreads_ = other.maxCompletionPortThreads_;
      maxWorkerThreads_ = other.maxWorkerThreads_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClrThread Clone() {
      return new ClrThread(this);
    }

    /// <summary>Field number for the "AvailableCompletionPortThreads" field.</summary>
    public const int AvailableCompletionPortThreadsFieldNumber = 1;
    private int availableCompletionPortThreads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableCompletionPortThreads {
      get { return availableCompletionPortThreads_; }
      set {
        availableCompletionPortThreads_ = value;
      }
    }

    /// <summary>Field number for the "AvailableWorkerThreads" field.</summary>
    public const int AvailableWorkerThreadsFieldNumber = 2;
    private int availableWorkerThreads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableWorkerThreads {
      get { return availableWorkerThreads_; }
      set {
        availableWorkerThreads_ = value;
      }
    }

    /// <summary>Field number for the "MaxCompletionPortThreads" field.</summary>
    public const int MaxCompletionPortThreadsFieldNumber = 3;
    private int maxCompletionPortThreads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCompletionPortThreads {
      get { return maxCompletionPortThreads_; }
      set {
        maxCompletionPortThreads_ = value;
      }
    }

    /// <summary>Field number for the "MaxWorkerThreads" field.</summary>
    public const int MaxWorkerThreadsFieldNumber = 4;
    private int maxWorkerThreads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxWorkerThreads {
      get { return maxWorkerThreads_; }
      set {
        maxWorkerThreads_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClrThread);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClrThread other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvailableCompletionPortThreads != other.AvailableCompletionPortThreads) return false;
      if (AvailableWorkerThreads != other.AvailableWorkerThreads) return false;
      if (MaxCompletionPortThreads != other.MaxCompletionPortThreads) return false;
      if (MaxWorkerThreads != other.MaxWorkerThreads) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvailableCompletionPortThreads != 0) hash ^= AvailableCompletionPortThreads.GetHashCode();
      if (AvailableWorkerThreads != 0) hash ^= AvailableWorkerThreads.GetHashCode();
      if (MaxCompletionPortThreads != 0) hash ^= MaxCompletionPortThreads.GetHashCode();
      if (MaxWorkerThreads != 0) hash ^= MaxWorkerThreads.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AvailableCompletionPortThreads != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AvailableCompletionPortThreads);
      }
      if (AvailableWorkerThreads != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AvailableWorkerThreads);
      }
      if (MaxCompletionPortThreads != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxCompletionPortThreads);
      }
      if (MaxWorkerThreads != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxWorkerThreads);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvailableCompletionPortThreads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableCompletionPortThreads);
      }
      if (AvailableWorkerThreads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableWorkerThreads);
      }
      if (MaxCompletionPortThreads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCompletionPortThreads);
      }
      if (MaxWorkerThreads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxWorkerThreads);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClrThread other) {
      if (other == null) {
        return;
      }
      if (other.AvailableCompletionPortThreads != 0) {
        AvailableCompletionPortThreads = other.AvailableCompletionPortThreads;
      }
      if (other.AvailableWorkerThreads != 0) {
        AvailableWorkerThreads = other.AvailableWorkerThreads;
      }
      if (other.MaxCompletionPortThreads != 0) {
        MaxCompletionPortThreads = other.MaxCompletionPortThreads;
      }
      if (other.MaxWorkerThreads != 0) {
        MaxWorkerThreads = other.MaxWorkerThreads;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvailableCompletionPortThreads = input.ReadInt32();
            break;
          }
          case 16: {
            AvailableWorkerThreads = input.ReadInt32();
            break;
          }
          case 24: {
            MaxCompletionPortThreads = input.ReadInt32();
            break;
          }
          case 32: {
            MaxWorkerThreads = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
