// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: language-agent/TraceSegmentService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol {

  /// <summary>Holder for reflection information generated from language-agent/TraceSegmentService.proto</summary>
  public static partial class TraceSegmentServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for language-agent/TraceSegmentService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TraceSegmentServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihsYW5ndWFnZS1hZ2VudC9UcmFjZVNlZ21lbnRTZXJ2aWNlLnByb3RvGh9s",
            "YW5ndWFnZS1hZ2VudC9Eb3duc3RyZWFtLnByb3RvGidsYW5ndWFnZS1hZ2Vu",
            "dC9LZXlXaXRoU3RyaW5nVmFsdWUucHJvdG8aGWNvbW1vbi90cmFjZS1jb21t",
            "b24ucHJvdG8ioAEKElRyYWNlU2VnbWVudE9iamVjdBIhCg50cmFjZVNlZ21l",
            "bnRJZBgBIAEoCzIJLlVuaXF1ZUlkEhoKBXNwYW5zGAIgAygLMgsuU3Bhbk9i",
            "amVjdBIVCg1hcHBsaWNhdGlvbklkGAMgASgFEh0KFWFwcGxpY2F0aW9uSW5z",
            "dGFuY2VJZBgEIAEoBRIVCg1pc1NpemVMaW1pdGVkGAUgASgIItICChVUcmFj",
            "ZVNlZ21lbnRSZWZlcmVuY2USGQoHcmVmVHlwZRgBIAEoDjIILlJlZlR5cGUS",
            "JwoUcGFyZW50VHJhY2VTZWdtZW50SWQYAiABKAsyCS5VbmlxdWVJZBIUCgxw",
            "YXJlbnRTcGFuSWQYAyABKAUSIwobcGFyZW50QXBwbGljYXRpb25JbnN0YW5j",
            "ZUlkGAQgASgFEhYKDm5ldHdvcmtBZGRyZXNzGAUgASgJEhgKEG5ldHdvcmtB",
            "ZGRyZXNzSWQYBiABKAUSIgoaZW50cnlBcHBsaWNhdGlvbkluc3RhbmNlSWQY",
            "ByABKAUSGAoQZW50cnlTZXJ2aWNlTmFtZRgIIAEoCRIWCg5lbnRyeVNlcnZp",
            "Y2VJZBgJIAEoBRIZChFwYXJlbnRTZXJ2aWNlTmFtZRgKIAEoCRIXCg9wYXJl",
            "bnRTZXJ2aWNlSWQYCyABKAUi/QIKClNwYW5PYmplY3QSDgoGc3BhbklkGAEg",
            "ASgFEhQKDHBhcmVudFNwYW5JZBgCIAEoBRIRCglzdGFydFRpbWUYAyABKAMS",
            "DwoHZW5kVGltZRgEIAEoAxIkCgRyZWZzGAUgAygLMhYuVHJhY2VTZWdtZW50",
            "UmVmZXJlbmNlEhcKD29wZXJhdGlvbk5hbWVJZBgGIAEoBRIVCg1vcGVyYXRp",
            "b25OYW1lGAcgASgJEg4KBnBlZXJJZBgIIAEoBRIMCgRwZWVyGAkgASgJEhsK",
            "CHNwYW5UeXBlGAogASgOMgkuU3BhblR5cGUSHQoJc3BhbkxheWVyGAsgASgO",
            "MgouU3BhbkxheWVyEhMKC2NvbXBvbmVudElkGAwgASgFEhEKCWNvbXBvbmVu",
            "dBgNIAEoCRIPCgdpc0Vycm9yGA4gASgIEiEKBHRhZ3MYDyADKAsyEy5LZXlX",
            "aXRoU3RyaW5nVmFsdWUSGQoEbG9ncxgQIAMoCzILLkxvZ01lc3NhZ2UiPQoK",
            "TG9nTWVzc2FnZRIMCgR0aW1lGAEgASgDEiEKBGRhdGEYAiADKAsyEy5LZXlX",
            "aXRoU3RyaW5nVmFsdWUyQwoTVHJhY2VTZWdtZW50U2VydmljZRIsCgdjb2xs",
            "ZWN0EhAuVXBzdHJlYW1TZWdtZW50GgsuRG93bnN0cmVhbSIAKAFCUQowb3Jn",
            "LmFwYWNoZS5za3l3YWxraW5nLmFwbS5uZXR3b3JrLmxhbmd1YWdlLmFnZW50",
            "UAGqAhpTa3lXYWxraW5nLk5ldHdvcmtQcm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.DownstreamReflection.Descriptor, global::SkyWalking.NetworkProtocol.KeyWithStringValueReflection.Descriptor, global::SkyWalking.NetworkProtocol.TraceCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.TraceSegmentObject), global::SkyWalking.NetworkProtocol.TraceSegmentObject.Parser, new[]{ "TraceSegmentId", "Spans", "ApplicationId", "ApplicationInstanceId", "IsSizeLimited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.TraceSegmentReference), global::SkyWalking.NetworkProtocol.TraceSegmentReference.Parser, new[]{ "RefType", "ParentTraceSegmentId", "ParentSpanId", "ParentApplicationInstanceId", "NetworkAddress", "NetworkAddressId", "EntryApplicationInstanceId", "EntryServiceName", "EntryServiceId", "ParentServiceName", "ParentServiceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.SpanObject), global::SkyWalking.NetworkProtocol.SpanObject.Parser, new[]{ "SpanId", "ParentSpanId", "StartTime", "EndTime", "Refs", "OperationNameId", "OperationName", "PeerId", "Peer", "SpanType", "SpanLayer", "ComponentId", "Component", "IsError", "Tags", "Logs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.LogMessage), global::SkyWalking.NetworkProtocol.LogMessage.Parser, new[]{ "Time", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TraceSegmentObject : pb::IMessage<TraceSegmentObject> {
    private static readonly pb::MessageParser<TraceSegmentObject> _parser = new pb::MessageParser<TraceSegmentObject>(() => new TraceSegmentObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceSegmentObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceSegmentServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceSegmentObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceSegmentObject(TraceSegmentObject other) : this() {
      traceSegmentId_ = other.traceSegmentId_ != null ? other.traceSegmentId_.Clone() : null;
      spans_ = other.spans_.Clone();
      applicationId_ = other.applicationId_;
      applicationInstanceId_ = other.applicationInstanceId_;
      isSizeLimited_ = other.isSizeLimited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceSegmentObject Clone() {
      return new TraceSegmentObject(this);
    }

    /// <summary>Field number for the "traceSegmentId" field.</summary>
    public const int TraceSegmentIdFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.UniqueId traceSegmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.UniqueId TraceSegmentId {
      get { return traceSegmentId_; }
      set {
        traceSegmentId_ = value;
      }
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.SpanObject> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(18, global::SkyWalking.NetworkProtocol.SpanObject.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SpanObject> spans_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SpanObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.SpanObject> Spans {
      get { return spans_; }
    }

    /// <summary>Field number for the "applicationId" field.</summary>
    public const int ApplicationIdFieldNumber = 3;
    private int applicationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationId {
      get { return applicationId_; }
      set {
        applicationId_ = value;
      }
    }

    /// <summary>Field number for the "applicationInstanceId" field.</summary>
    public const int ApplicationInstanceIdFieldNumber = 4;
    private int applicationInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplicationInstanceId {
      get { return applicationInstanceId_; }
      set {
        applicationInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "isSizeLimited" field.</summary>
    public const int IsSizeLimitedFieldNumber = 5;
    private bool isSizeLimited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSizeLimited {
      get { return isSizeLimited_; }
      set {
        isSizeLimited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceSegmentObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceSegmentObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TraceSegmentId, other.TraceSegmentId)) return false;
      if(!spans_.Equals(other.spans_)) return false;
      if (ApplicationId != other.ApplicationId) return false;
      if (ApplicationInstanceId != other.ApplicationInstanceId) return false;
      if (IsSizeLimited != other.IsSizeLimited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (traceSegmentId_ != null) hash ^= TraceSegmentId.GetHashCode();
      hash ^= spans_.GetHashCode();
      if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
      if (ApplicationInstanceId != 0) hash ^= ApplicationInstanceId.GetHashCode();
      if (IsSizeLimited != false) hash ^= IsSizeLimited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (traceSegmentId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TraceSegmentId);
      }
      spans_.WriteTo(output, _repeated_spans_codec);
      if (ApplicationId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplicationId);
      }
      if (ApplicationInstanceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ApplicationInstanceId);
      }
      if (IsSizeLimited != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSizeLimited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (traceSegmentId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TraceSegmentId);
      }
      size += spans_.CalculateSize(_repeated_spans_codec);
      if (ApplicationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
      }
      if (ApplicationInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationInstanceId);
      }
      if (IsSizeLimited != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceSegmentObject other) {
      if (other == null) {
        return;
      }
      if (other.traceSegmentId_ != null) {
        if (traceSegmentId_ == null) {
          TraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
        }
        TraceSegmentId.MergeFrom(other.TraceSegmentId);
      }
      spans_.Add(other.spans_);
      if (other.ApplicationId != 0) {
        ApplicationId = other.ApplicationId;
      }
      if (other.ApplicationInstanceId != 0) {
        ApplicationInstanceId = other.ApplicationInstanceId;
      }
      if (other.IsSizeLimited != false) {
        IsSizeLimited = other.IsSizeLimited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (traceSegmentId_ == null) {
              TraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
            }
            input.ReadMessage(TraceSegmentId);
            break;
          }
          case 18: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
          case 24: {
            ApplicationId = input.ReadInt32();
            break;
          }
          case 32: {
            ApplicationInstanceId = input.ReadInt32();
            break;
          }
          case 40: {
            IsSizeLimited = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceSegmentReference : pb::IMessage<TraceSegmentReference> {
    private static readonly pb::MessageParser<TraceSegmentReference> _parser = new pb::MessageParser<TraceSegmentReference>(() => new TraceSegmentReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceSegmentReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceSegmentServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceSegmentReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceSegmentReference(TraceSegmentReference other) : this() {
      refType_ = other.refType_;
      parentTraceSegmentId_ = other.parentTraceSegmentId_ != null ? other.parentTraceSegmentId_.Clone() : null;
      parentSpanId_ = other.parentSpanId_;
      parentApplicationInstanceId_ = other.parentApplicationInstanceId_;
      networkAddress_ = other.networkAddress_;
      networkAddressId_ = other.networkAddressId_;
      entryApplicationInstanceId_ = other.entryApplicationInstanceId_;
      entryServiceName_ = other.entryServiceName_;
      entryServiceId_ = other.entryServiceId_;
      parentServiceName_ = other.parentServiceName_;
      parentServiceId_ = other.parentServiceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceSegmentReference Clone() {
      return new TraceSegmentReference(this);
    }

    /// <summary>Field number for the "refType" field.</summary>
    public const int RefTypeFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.RefType refType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.RefType RefType {
      get { return refType_; }
      set {
        refType_ = value;
      }
    }

    /// <summary>Field number for the "parentTraceSegmentId" field.</summary>
    public const int ParentTraceSegmentIdFieldNumber = 2;
    private global::SkyWalking.NetworkProtocol.UniqueId parentTraceSegmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.UniqueId ParentTraceSegmentId {
      get { return parentTraceSegmentId_; }
      set {
        parentTraceSegmentId_ = value;
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 3;
    private int parentSpanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "parentApplicationInstanceId" field.</summary>
    public const int ParentApplicationInstanceIdFieldNumber = 4;
    private int parentApplicationInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentApplicationInstanceId {
      get { return parentApplicationInstanceId_; }
      set {
        parentApplicationInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "networkAddress" field.</summary>
    public const int NetworkAddressFieldNumber = 5;
    private string networkAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkAddress {
      get { return networkAddress_; }
      set {
        networkAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "networkAddressId" field.</summary>
    public const int NetworkAddressIdFieldNumber = 6;
    private int networkAddressId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetworkAddressId {
      get { return networkAddressId_; }
      set {
        networkAddressId_ = value;
      }
    }

    /// <summary>Field number for the "entryApplicationInstanceId" field.</summary>
    public const int EntryApplicationInstanceIdFieldNumber = 7;
    private int entryApplicationInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntryApplicationInstanceId {
      get { return entryApplicationInstanceId_; }
      set {
        entryApplicationInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "entryServiceName" field.</summary>
    public const int EntryServiceNameFieldNumber = 8;
    private string entryServiceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntryServiceName {
      get { return entryServiceName_; }
      set {
        entryServiceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entryServiceId" field.</summary>
    public const int EntryServiceIdFieldNumber = 9;
    private int entryServiceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntryServiceId {
      get { return entryServiceId_; }
      set {
        entryServiceId_ = value;
      }
    }

    /// <summary>Field number for the "parentServiceName" field.</summary>
    public const int ParentServiceNameFieldNumber = 10;
    private string parentServiceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentServiceName {
      get { return parentServiceName_; }
      set {
        parentServiceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentServiceId" field.</summary>
    public const int ParentServiceIdFieldNumber = 11;
    private int parentServiceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentServiceId {
      get { return parentServiceId_; }
      set {
        parentServiceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceSegmentReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceSegmentReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefType != other.RefType) return false;
      if (!object.Equals(ParentTraceSegmentId, other.ParentTraceSegmentId)) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (ParentApplicationInstanceId != other.ParentApplicationInstanceId) return false;
      if (NetworkAddress != other.NetworkAddress) return false;
      if (NetworkAddressId != other.NetworkAddressId) return false;
      if (EntryApplicationInstanceId != other.EntryApplicationInstanceId) return false;
      if (EntryServiceName != other.EntryServiceName) return false;
      if (EntryServiceId != other.EntryServiceId) return false;
      if (ParentServiceName != other.ParentServiceName) return false;
      if (ParentServiceId != other.ParentServiceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefType != 0) hash ^= RefType.GetHashCode();
      if (parentTraceSegmentId_ != null) hash ^= ParentTraceSegmentId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (ParentApplicationInstanceId != 0) hash ^= ParentApplicationInstanceId.GetHashCode();
      if (NetworkAddress.Length != 0) hash ^= NetworkAddress.GetHashCode();
      if (NetworkAddressId != 0) hash ^= NetworkAddressId.GetHashCode();
      if (EntryApplicationInstanceId != 0) hash ^= EntryApplicationInstanceId.GetHashCode();
      if (EntryServiceName.Length != 0) hash ^= EntryServiceName.GetHashCode();
      if (EntryServiceId != 0) hash ^= EntryServiceId.GetHashCode();
      if (ParentServiceName.Length != 0) hash ^= ParentServiceName.GetHashCode();
      if (ParentServiceId != 0) hash ^= ParentServiceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RefType);
      }
      if (parentTraceSegmentId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ParentSpanId);
      }
      if (ParentApplicationInstanceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentApplicationInstanceId);
      }
      if (NetworkAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NetworkAddress);
      }
      if (NetworkAddressId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NetworkAddressId);
      }
      if (EntryApplicationInstanceId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EntryApplicationInstanceId);
      }
      if (EntryServiceName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(EntryServiceName);
      }
      if (EntryServiceId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EntryServiceId);
      }
      if (ParentServiceName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ParentServiceName);
      }
      if (ParentServiceId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ParentServiceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefType);
      }
      if (parentTraceSegmentId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (ParentApplicationInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentApplicationInstanceId);
      }
      if (NetworkAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkAddress);
      }
      if (NetworkAddressId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkAddressId);
      }
      if (EntryApplicationInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntryApplicationInstanceId);
      }
      if (EntryServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntryServiceName);
      }
      if (EntryServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntryServiceId);
      }
      if (ParentServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentServiceName);
      }
      if (ParentServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentServiceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceSegmentReference other) {
      if (other == null) {
        return;
      }
      if (other.RefType != 0) {
        RefType = other.RefType;
      }
      if (other.parentTraceSegmentId_ != null) {
        if (parentTraceSegmentId_ == null) {
          ParentTraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
        }
        ParentTraceSegmentId.MergeFrom(other.ParentTraceSegmentId);
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.ParentApplicationInstanceId != 0) {
        ParentApplicationInstanceId = other.ParentApplicationInstanceId;
      }
      if (other.NetworkAddress.Length != 0) {
        NetworkAddress = other.NetworkAddress;
      }
      if (other.NetworkAddressId != 0) {
        NetworkAddressId = other.NetworkAddressId;
      }
      if (other.EntryApplicationInstanceId != 0) {
        EntryApplicationInstanceId = other.EntryApplicationInstanceId;
      }
      if (other.EntryServiceName.Length != 0) {
        EntryServiceName = other.EntryServiceName;
      }
      if (other.EntryServiceId != 0) {
        EntryServiceId = other.EntryServiceId;
      }
      if (other.ParentServiceName.Length != 0) {
        ParentServiceName = other.ParentServiceName;
      }
      if (other.ParentServiceId != 0) {
        ParentServiceId = other.ParentServiceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefType = (global::SkyWalking.NetworkProtocol.RefType) input.ReadEnum();
            break;
          }
          case 18: {
            if (parentTraceSegmentId_ == null) {
              ParentTraceSegmentId = new global::SkyWalking.NetworkProtocol.UniqueId();
            }
            input.ReadMessage(ParentTraceSegmentId);
            break;
          }
          case 24: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 32: {
            ParentApplicationInstanceId = input.ReadInt32();
            break;
          }
          case 42: {
            NetworkAddress = input.ReadString();
            break;
          }
          case 48: {
            NetworkAddressId = input.ReadInt32();
            break;
          }
          case 56: {
            EntryApplicationInstanceId = input.ReadInt32();
            break;
          }
          case 66: {
            EntryServiceName = input.ReadString();
            break;
          }
          case 72: {
            EntryServiceId = input.ReadInt32();
            break;
          }
          case 82: {
            ParentServiceName = input.ReadString();
            break;
          }
          case 88: {
            ParentServiceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpanObject : pb::IMessage<SpanObject> {
    private static readonly pb::MessageParser<SpanObject> _parser = new pb::MessageParser<SpanObject>(() => new SpanObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceSegmentServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject(SpanObject other) : this() {
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      refs_ = other.refs_.Clone();
      operationNameId_ = other.operationNameId_;
      operationName_ = other.operationName_;
      peerId_ = other.peerId_;
      peer_ = other.peer_;
      spanType_ = other.spanType_;
      spanLayer_ = other.spanLayer_;
      componentId_ = other.componentId_;
      component_ = other.component_;
      isError_ = other.isError_;
      tags_ = other.tags_.Clone();
      logs_ = other.logs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject Clone() {
      return new SpanObject(this);
    }

    /// <summary>Field number for the "spanId" field.</summary>
    public const int SpanIdFieldNumber = 1;
    private int spanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpanId {
      get { return spanId_; }
      set {
        spanId_ = value;
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 2;
    private int parentSpanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "refs" field.</summary>
    public const int RefsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.TraceSegmentReference> _repeated_refs_codec
        = pb::FieldCodec.ForMessage(42, global::SkyWalking.NetworkProtocol.TraceSegmentReference.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.TraceSegmentReference> refs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.TraceSegmentReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.TraceSegmentReference> Refs {
      get { return refs_; }
    }

    /// <summary>Field number for the "operationNameId" field.</summary>
    public const int OperationNameIdFieldNumber = 6;
    private int operationNameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationNameId {
      get { return operationNameId_; }
      set {
        operationNameId_ = value;
      }
    }

    /// <summary>Field number for the "operationName" field.</summary>
    public const int OperationNameFieldNumber = 7;
    private string operationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peerId" field.</summary>
    public const int PeerIdFieldNumber = 8;
    private int peerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PeerId {
      get { return peerId_; }
      set {
        peerId_ = value;
      }
    }

    /// <summary>Field number for the "peer" field.</summary>
    public const int PeerFieldNumber = 9;
    private string peer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Peer {
      get { return peer_; }
      set {
        peer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spanType" field.</summary>
    public const int SpanTypeFieldNumber = 10;
    private global::SkyWalking.NetworkProtocol.SpanType spanType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.SpanType SpanType {
      get { return spanType_; }
      set {
        spanType_ = value;
      }
    }

    /// <summary>Field number for the "spanLayer" field.</summary>
    public const int SpanLayerFieldNumber = 11;
    private global::SkyWalking.NetworkProtocol.SpanLayer spanLayer_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.SpanLayer SpanLayer {
      get { return spanLayer_; }
      set {
        spanLayer_ = value;
      }
    }

    /// <summary>Field number for the "componentId" field.</summary>
    public const int ComponentIdFieldNumber = 12;
    private int componentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentId {
      get { return componentId_; }
      set {
        componentId_ = value;
      }
    }

    /// <summary>Field number for the "component" field.</summary>
    public const int ComponentFieldNumber = 13;
    private string component_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Component {
      get { return component_; }
      set {
        component_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isError" field.</summary>
    public const int IsErrorFieldNumber = 14;
    private bool isError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.KeyWithStringValue> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(122, global::SkyWalking.NetworkProtocol.KeyWithStringValue.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyWithStringValue> tags_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyWithStringValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyWithStringValue> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.LogMessage> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(130, global::SkyWalking.NetworkProtocol.LogMessage.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.LogMessage> logs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.LogMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.LogMessage> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!refs_.Equals(other.refs_)) return false;
      if (OperationNameId != other.OperationNameId) return false;
      if (OperationName != other.OperationName) return false;
      if (PeerId != other.PeerId) return false;
      if (Peer != other.Peer) return false;
      if (SpanType != other.SpanType) return false;
      if (SpanLayer != other.SpanLayer) return false;
      if (ComponentId != other.ComponentId) return false;
      if (Component != other.Component) return false;
      if (IsError != other.IsError) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpanId != 0) hash ^= SpanId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      hash ^= refs_.GetHashCode();
      if (OperationNameId != 0) hash ^= OperationNameId.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      if (PeerId != 0) hash ^= PeerId.GetHashCode();
      if (Peer.Length != 0) hash ^= Peer.GetHashCode();
      if (SpanType != 0) hash ^= SpanType.GetHashCode();
      if (SpanLayer != 0) hash ^= SpanLayer.GetHashCode();
      if (ComponentId != 0) hash ^= ComponentId.GetHashCode();
      if (Component.Length != 0) hash ^= Component.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpanId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentSpanId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      refs_.WriteTo(output, _repeated_refs_codec);
      if (OperationNameId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OperationNameId);
      }
      if (OperationName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OperationName);
      }
      if (PeerId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PeerId);
      }
      if (Peer.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Peer);
      }
      if (SpanType != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SpanType);
      }
      if (SpanLayer != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SpanLayer);
      }
      if (ComponentId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ComponentId);
      }
      if (Component.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Component);
      }
      if (IsError != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsError);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpanId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += refs_.CalculateSize(_repeated_refs_codec);
      if (OperationNameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationNameId);
      }
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      if (PeerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerId);
      }
      if (Peer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Peer);
      }
      if (SpanType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanType);
      }
      if (SpanLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanLayer);
      }
      if (ComponentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentId);
      }
      if (Component.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Component);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanObject other) {
      if (other == null) {
        return;
      }
      if (other.SpanId != 0) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      refs_.Add(other.refs_);
      if (other.OperationNameId != 0) {
        OperationNameId = other.OperationNameId;
      }
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      if (other.PeerId != 0) {
        PeerId = other.PeerId;
      }
      if (other.Peer.Length != 0) {
        Peer = other.Peer;
      }
      if (other.SpanType != 0) {
        SpanType = other.SpanType;
      }
      if (other.SpanLayer != 0) {
        SpanLayer = other.SpanLayer;
      }
      if (other.ComponentId != 0) {
        ComponentId = other.ComponentId;
      }
      if (other.Component.Length != 0) {
        Component = other.Component;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      tags_.Add(other.tags_);
      logs_.Add(other.logs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpanId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 42: {
            refs_.AddEntriesFrom(input, _repeated_refs_codec);
            break;
          }
          case 48: {
            OperationNameId = input.ReadInt32();
            break;
          }
          case 58: {
            OperationName = input.ReadString();
            break;
          }
          case 64: {
            PeerId = input.ReadInt32();
            break;
          }
          case 74: {
            Peer = input.ReadString();
            break;
          }
          case 80: {
            SpanType = (global::SkyWalking.NetworkProtocol.SpanType) input.ReadEnum();
            break;
          }
          case 88: {
            SpanLayer = (global::SkyWalking.NetworkProtocol.SpanLayer) input.ReadEnum();
            break;
          }
          case 96: {
            ComponentId = input.ReadInt32();
            break;
          }
          case 106: {
            Component = input.ReadString();
            break;
          }
          case 112: {
            IsError = input.ReadBool();
            break;
          }
          case 122: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 130: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogMessage : pb::IMessage<LogMessage> {
    private static readonly pb::MessageParser<LogMessage> _parser = new pb::MessageParser<LogMessage>(() => new LogMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.TraceSegmentServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage(LogMessage other) : this() {
      time_ = other.time_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage Clone() {
      return new LogMessage(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.KeyWithStringValue> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::SkyWalking.NetworkProtocol.KeyWithStringValue.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyWithStringValue> data_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyWithStringValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.KeyWithStringValue> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogMessage other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
